method f(A:array<int>) returns(i:int)
requires A.Length > 0;
ensures 0 <= i < A.Length && forall k:: 0 <= k < A.Length ==> A[k] <= A[i];
{
  var j: int;
  i := 0;
  j := 1;
  while (j != A.Length)
  invariant 0 <= i < j <= A.Length;
  invariant forall k:: 0 <= k < j ==> A[k] <= A[i];
  { 
    if (A[j] > A[i] )  { 
        i := j; 
        j := j+1; 
    } 
    else { 
        j := j+1; 
    } 
  }
}

method f4a(input: int) returns (output: int)
requires input >= 0;
ensures output == 0;
{
  var i: int;
  i := input;
  while (i > 0) 
    invariant i >= 0;
    decreases i; 
  {
    i := i - 1;
   }
  output := i;
}

method f4b(input: int) returns (output: int)
//requires input >= 0;
requires input >= 0 && input % 2 == 0;
ensures output == 0; // This is the postcondition that might not hold.
{
  var i: int;
  i := input;
  while (i > 0) 
      invariant i % 2 == 0 && i >= 0;
    decreases i;
  {
    i := i - 2;
   }
  output := i;
}

method f4c(input: int) returns (output: int)
requires input >= 2;
ensures output == 0 || output == 1;
{
  var i: int;
  i := input;
  while (i > 1) 
  {
    i := i - 2;
   }
  output := i;
}


method f4d(input: int) returns (output: int)
requires input <= 20;
ensures output == 20;
{
  var i: int;
  i := input;
  while (i < 20)
  { 
    i := i + 1;
  } 
  output := i;
}


