class Client

types
public String = seq of char;

values

instance variables
		name: String;
		public static clientID: int := 0;
		public id : int := clientID;
		balance: real;
		basket: seq of Product :=[];
		location: Location;
		
operations

public Client: String * int * int ==> Client
Client(clientName, x, y) == (
		name := clientName;
		id := clientID;
		clientID := clientID + 1;
		balance := 5;
		location := new Location(x,y);
		return self
);

-- Returns user name
public pure getName : () ==> String
		getName() == 
		return name;

-- Returns user ID
public getID: () ==> nat
		getID() ==
		return id;

-- Returns user basket
public getBasket: () ==> seq of Product
		getBasket() ==
		return basket;

-- Returns user balance
public getBalance: () ==> real
		getBalance() ==
		return balance;
		
-- User credit
public credit : real ==> ()
		credit(amount) ==
		balance := balance + amount
	pre (balance + amount) >= 0 and amount > 0
	post balance~ = balance + amount;

-- User debit
public debit : real ==> ()
		debit(amount) ==
		balance := balance - amount
	pre (balance - amount) >= 0 and amount > 0
	post balance~ = balance + amount;

functions

-- Compares 2 clients by ID
public equals : Client * Client -> bool
	equals(c1, c2) ==
	c1.id = c2.id;

traces
-- TODO Define Combinatorial Test Traces here
end Client