class Glovo

types
-- TODO Define types here
values
-- TODO Define values here
instance variables
		clients: set of Client :={};
		orders: set of Delivery :={};
		suppliers: set of Supplier :={};
		transports: set of Transport :={};
		
operations

public Glovo: () ==> Glovo
		Glovo() == return self;

pure public getClients: () ==> set of Client
		getClients() ==
		return clients;

public getDeliveryToDo: () ==> set of Delivery 
		getDeliveryToDo() ==
		return {order | order in set orders & order.status = <Null>};

public getDeliveryDone: () ==> set of Delivery 
		getDeliveryDone() ==
		return {order | order in set orders & order.status = <Client>};		
		
public getdeliveryDoing: () ==> set of Delivery 
		getdeliveryDoing() ==
		return {order | order in set orders & order.doing()};		

public getTransports: () ==> set of Transport
		getTransports() ==
		return transports;
		
public getSuppliers: () ==> set of Supplier
		getSuppliers() ==
		return suppliers;
	
public addClient :Client ==> ()
		addClient(c) == 
		clients := clients union {c}
			pre not exists client in set clients & Client`equals(client, c)
post c in set clients;

public removeClient : Client ==> ()
		removeClient(c) ==
		(
			for all client in set clients do
				if Client`equals(client, c) 
				then clients := clients \ {client};
		)
			pre exists client in set clients & Client`equals(client, c)
post not exists client in set clients & Client`equals(client, c);
		
functions

traces

end Glovo